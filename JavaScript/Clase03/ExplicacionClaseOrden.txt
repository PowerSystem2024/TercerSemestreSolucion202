UTILIZACION DE POLIMORFISMO  

üß¨ ¬øQu√© es el polimorfismo aplicado a este caso? 

Polimorfismo significa que distintos objetos pueden responder al mismo mensaje (m√©todo) de manera diferente. En tu c√≥digo, esto se ve claramente cuando us√°s el m√©todo toString() en distintos objetos (Monitor, Raton, Teclado, Computadora), aunque cada clase tiene su propia implementaci√≥n del m√©todo. 

 

üß© ¬øC√≥mo lo usa la clase Orden? 

La clase Orden no necesita saber c√≥mo est√°n implementadas internamente las computadoras ni sus componentes, porque conf√≠a en que todos esos objetos (como Computadora, que incluye Monitor, Raton y Teclado) tienen su propio comportamiento al ser convertidos a texto mediante toString(). 

Esto invoca autom√°ticamente el m√©todo toString() de la clase Computadora. 

A su vez, el toString() de Computadora invoca el toString() de Monitor, Teclado y Raton, sin saber exactamente qu√© hacen, solo conf√≠a en que existen y est√°n bien definidos. 

 

üéØ ¬øEntonces qu√© est√° haciendo la clase Orden con el polimorfismo? 

‚úÖ Aprovecha el polimorfismo de forma indirecta 
 Porque usa console.log(computadora) o ${computadora} y deja que cada clase decida c√≥mo se representa a s√≠ misma. 

‚úÖ Simplifica su l√≥gica 
 No necesita preguntar si el objeto es un Rat√≥n, Monitor, etc. Simplemente conf√≠a en el toString() polim√≥rfico. 

 

üìù Conclusi√≥n 

La clase Orden usa el polimorfismo de manera impl√≠cita al permitir que cada computadora (y sus componentes) se representen a s√≠ mismos mediante su propio m√©todo toString(), sin importar su clase espec√≠fica. As√≠ se consigue c√≥digo m√°s limpio, extensible y reutilizable. 

 